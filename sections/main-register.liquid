{{ 'customer.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  #form-status {
    margin-top: 15px;
    font-weight: bold;
  }

  #form-status.success {
    color: green;
  }

  #form-status.error {
    color: red;
  }

  #register-submit-btn:disabled {
    background-color: #ddd;
  }
{%- endstyle -%}

<div class="customer register section-{{ section.id }}-padding">
  <h1>
    {{ 'customer.register.title' | t }}
  </h1>

  <form id="customer-register-form" novalidate>
    <div class="field">
      <input
        type="text"
        name="customer[first_name]"
        id="RegisterForm-FirstName"
        {% if form.first_name %}
          value="{{ form.first_name }}"
        {% endif %}
        autocomplete="given-name"
        placeholder="{{ 'customer.register.first_name' | t }}"
      >
      <label for="RegisterForm-FirstName">
        {{ 'customer.register.first_name' | t }}
      </label>
    </div>
    <div class="field">
      <input
        type="text"
        name="customer[last_name]"
        id="RegisterForm-LastName"
        {% if form.last_name %}
          value="{{ form.last_name }}"
        {% endif %}
        autocomplete="family-name"
        placeholder="{{ 'customer.register.last_name' | t }}"
      >
      <label for="RegisterForm-LastName">
        {{ 'customer.register.last_name' | t }}
      </label>
    </div>
    <div class="field">
      <input
        type="email"
        name="customer[email]"
        id="RegisterForm-email"
        {% if form.email %}
          value="{{ form.email }}"
        {% endif %}
        spellcheck="false"
        autocapitalize="off"
        autocomplete="email"
        aria-required="true"
        {% if form.errors contains 'email' %}
          aria-invalid="true"
          aria-describedby="RegisterForm-email-error"
        {% endif %}
        placeholder="{{ 'customer.register.email' | t }}"
      >
      <label for="RegisterForm-email">
        {{ 'customer.register.email' | t }}
      </label>
    </div>
    {%- if form.errors contains 'email' -%}
      <span id="RegisterForm-email-error" class="form__message">
        <span class="svg-wrapper">
          {{- 'icon-error.svg' | inline_asset_content -}}
        </span>
        {{ form.errors.translated_fields.email | capitalize }}
        {{ form.errors.messages.email }}.
      </span>
    {%- endif -%}
    <div class="field">
      <input
        type="password"
        name="customer[password]"
        id="RegisterForm-password"
        aria-required="true"
        {% if form.errors contains 'password' %}
          aria-invalid="true"
          aria-describedby="RegisterForm-password-error"
        {% endif %}
        placeholder="{{ 'customer.register.password' | t }}"
      >
      <label for="RegisterForm-password">
        {{ 'customer.register.password' | t }}
      </label>
    </div>
    {%- if form.errors contains 'password' -%}
      <span id="RegisterForm-password-error" class="form__message">
        <span class="svg-wrapper">
          {{- 'icon-error.svg' | inline_asset_content -}}
        </span>
        {{ form.errors.translated_fields.password | capitalize }}
        {{ form.errors.messages.password }}.
      </span>
    {%- endif -%}
    <button type="submit" id="register-submit-btn">
      {{ 'customer.register.submit' | t }}
    </button>
    <div id="form-status"></div> <!-- Success/Failure messages will show here -->
  </form>
</div>

{% schema %}
{
  "name": "t:sections.main-register.name",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}

{%- javascript -%}
document.addEventListener("DOMContentLoaded", function () {
  const form = document.getElementById("customer-register-form");
  const submitButton = document.getElementById("register-submit-btn");
  const statusMessage = document.getElementById("form-status");

  const CUSTOMER_REGISTRATION_MUTATION = `
    mutation customerCreate($input: CustomerCreateInput!) {
      customerCreate(input: $input) {
        customer {
          firstName
          lastName
          email
          acceptsMarketing
        }
        customerUserErrors {
          field
          message
        }
      }
    }
  `;

  form.addEventListener("submit", function (event) {
    event.preventDefault(); // Prevent the traditional form submission

    // Disable the submit button and show a loading message
    submitButton.disabled = true;
    statusMessage.innerHTML = "Submitting... Please wait.";

    // Collect the form data
    const formData = new FormData(form);
    const customerData = {
      firstName: formData.get("customer[first_name]"),
      lastName: formData.get("customer[last_name]"),
      email: formData.get("customer[email]"),
      password: formData.get("customer[password]"),
      acceptsMarketing: false
    };

    // Send the data via GraphQL AJAX request
    fetch('/api/unstable/graphql.json', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
            'X-Shopify-Storefront-Access-Token': 'f223c6fa9e52062c450cf7a85f27d2c3' // Replace with your actual token
      },
      body: JSON.stringify({
        query: CUSTOMER_REGISTRATION_MUTATION,
        variables: { input: customerData }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.errors) {
        // Show GraphQL errors
        statusMessage.innerHTML = `Error: ${data.errors.map(err => err.message).join(", ")}`;
        statusMessage.classList.add("error");
        statusMessage.classList.remove("success");
      } else if (data.data.customerCreate.customerUserErrors.length > 0) {
        // Show GraphQL validation errors
        statusMessage.innerHTML = `Error: ${data.data.customerCreate.customerUserErrors.map(error => error.message).join(", ")}`;
        statusMessage.classList.add("error");
        statusMessage.classList.remove("success");
      } else {
        // Success message
        statusMessage.innerHTML = "Registration successful! Please check your email for verification.";
        statusMessage.classList.add("success");
        statusMessage.classList.remove("error");
        form.reset(); // Reset form fields
      }
    })
    .catch(error => {
      statusMessage.innerHTML = "An error occurred. Please try again.";
      statusMessage.classList.add("error");
      statusMessage.classList.remove("success");
    })
    .finally(() => {
      // Re-enable the submit button
      submitButton.disabled = false;
    });
  });
});
{%- endjavascript -%}
