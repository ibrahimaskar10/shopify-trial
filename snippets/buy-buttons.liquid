{% comment %}
  Renders product buy-buttons.
  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} product form id.
  - section_id: {String} id of section to which this snippet belongs.
  - show_pickup_availability: {Boolean} for the pickup availability. If true the pickup availability is rendered, false - not rendered (optional).

  Usage:
  {% render 'buy-buttons', block: block, product: product, product_form_id: product_form_id, section_id: section.id, show_pickup_availability: true %}
{% endcomment %}
<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif
    -%}

    <product-form
      class="product-form"
      data-hide-errors="{{ gift_card_recipient_feature_active }}"
      data-section-id="{{ section.id }}"
    >
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        <span class="svg-wrapper">
          {{- 'icon-error.svg' | inline_asset_content -}}
        </span>
        <span class="product-form__error-message"></span>
      </div>

      {%- form 'product',
        product,
        id: product_form_id,
        class: 'form',
        novalidate: 'novalidate',
        data-type: 'add-to-cart-form'
      -%}
        <input
          type="hidden"
          name="id"
          value="{{ product.selected_or_first_available_variant.id }}"
          {% if product.selected_or_first_available_variant.available == false
            or quantity_rule_soldout
            or product.selected_or_first_available_variant == null
          %}
            disabled
          {% endif %}
          class="product-variant-id"
        >

        {%- if gift_card_recipient_feature_active -%}
          {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
        {%- endif -%}

        <div class="product-form__buttons">
          {%- liquid
            assign check_against_inventory = true
            if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
              assign check_against_inventory = false
            endif
            if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
              assign quantity_rule_soldout = true
            endif
          -%}
          <button
            id="ProductSubmitButton-{{ section_id }}"
            type="submit"
            name="add"
            class="product-form__submit button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
            {% if product.selected_or_first_available_variant.available == false
              or quantity_rule_soldout
              or product.selected_or_first_available_variant == null
            %}
              disabled
            {% endif %}
          >
            <span>
              {%- if product.selected_or_first_available_variant == null -%}
                {{ 'products.product.unavailable' | t }}
              {%- elsif product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
                {{ 'products.product.sold_out' | t }}
              {%- else -%}
                {{ 'products.product.add_to_cart' | t }}
              {%- endif -%}
            </span>
            {%- render 'loading-spinner' -%}
          </button>
          {%- if show_dynamic_checkout -%}
            {{ form | payment_button }}
          {%- endif -%}
        </div>
              {%- endform -%}
      </product-form>

      {%- comment -%} Out of stock display logic {%- endcomment -%}
      {%- if product != blank and product.variants.size > 0 -%}
        {%- liquid
          assign out_of_stock_options = ''
          assign option_names = ''
          
          # Get all option names
          for option in product.options_with_values
            if option_names != ''
              assign option_names = option_names | append: '|' | append: option.name
            else
              assign option_names = option.name
            endif
          endfor
          
          # Create a structure to track out-of-stock options for each option type
          assign option_names_array = option_names | split: '|'
          assign out_of_stock_by_option = ''
          
          # Initialize tracking for each option
          for option_name in option_names_array
            assign option_key = option_name | downcase | replace: ' ', '_'
            assign out_of_stock_by_option = out_of_stock_by_option | append: option_key | append: ':' | append: '' | append: '|'
          endfor
          
          # First pass: collect all option values and their stock status
          assign option_value_tracking = ''
          
          for variant in product.variants
            assign check_against_inventory = true
            if variant.inventory_management != 'shopify' or variant.inventory_policy == 'continue'
              assign check_against_inventory = false
            endif
            if variant.quantity_rule.min > variant.inventory_quantity and check_against_inventory
              assign quantity_rule_soldout = true
            else
              assign quantity_rule_soldout = false
            endif
            
            assign is_out_of_stock = false
            if variant.available == false or quantity_rule_soldout
              assign is_out_of_stock = true
            endif
            
            # Check each option for this variant
            for i in (1..3)
              assign option_value = ''
              assign option_index = i | minus: 1
              
              if i == 1 and variant.option1 != blank
                assign option_value = variant.option1
              elsif i == 2 and variant.option2 != blank
                assign option_value = variant.option2
              elsif i == 3 and variant.option3 != blank
                assign option_value = variant.option3
              endif
              
              if option_value != '' and option_index < option_names_array.size
                assign current_option_name = option_names_array[option_index]
                assign option_key = current_option_name | downcase | replace: ' ', '_'
                
                # Create tracking entry: option_key:option_value:has_stock
                assign tracking_entry = option_key | append: ':' | append: option_value | append: ':' | append: is_out_of_stock | append: '|'
                assign option_value_tracking = option_value_tracking | append: tracking_entry
              endif
            endfor
          endfor
          
          # Second pass: analyze which option values are completely out of stock
          assign option_value_tracking_array = option_value_tracking | split: '|'
          assign option_value_status = ''
          
          for tracking_entry in option_value_tracking_array
            if tracking_entry != ''
              assign entry_parts = tracking_entry | split: ':'
              assign option_key = entry_parts[0]
              assign option_value = entry_parts[1]
              assign has_stock = entry_parts[2]
              
              # Check if we've already processed this option value
              assign already_processed = false
              assign processed_entries = option_value_status | split: '|'
              for processed_entry in processed_entries
                if processed_entry != ''
                  assign processed_parts = processed_entry | split: ':'
                  assign processed_key = processed_parts[0]
                  assign processed_value = processed_parts[1]
                  if processed_key == option_key and processed_value == option_value
                    assign already_processed = true
                    break
                  endif
                endif
              endfor
              
              if already_processed == false
                # Check if this option value has any variants in stock
                assign has_any_stock = false
                for check_entry in option_value_tracking_array
                  if check_entry != ''
                    assign check_parts = check_entry | split: ':'
                    assign check_key = check_parts[0]
                    assign check_value = check_parts[1]
                    assign check_stock = check_parts[2]
                    
                    if check_key == option_key and check_value == option_value
                      if check_stock == 'false'
                        assign has_any_stock = true
                        break
                      endif
                    endif
                  endif
                endfor
                
                # Add to tracking
                assign status_entry = option_key | append: ':' | append: option_value | append: ':' | append: has_any_stock | append: '|'
                assign option_value_status = option_value_status | append: status_entry
              endif
            endif
          endfor
          
          # Third pass: build the final out-of-stock lists
          assign option_value_status_array = option_value_status | split: '|'
          assign out_of_stock_by_option_array = out_of_stock_by_option | split: '|'
          assign updated_out_of_stock_by_option = ''
          
          for option_entry in out_of_stock_by_option_array
            if option_entry != ''
              assign entry_parts = option_entry | split: ':'
              assign entry_key = entry_parts[0]
              assign entry_values = entry_parts[1]
              
              # Find all out-of-stock values for this option
              assign out_of_stock_values = ''
              for status_entry in option_value_status_array
                if status_entry != ''
                  assign status_parts = status_entry | split: ':'
                  assign status_key = status_parts[0]
                  assign status_value = status_parts[1]
                  assign status_has_stock = status_parts[2]
                  
                  if status_key == entry_key and status_has_stock == 'false'
                    if out_of_stock_values != ''
                      assign out_of_stock_values = out_of_stock_values | append: ',' | append: status_value
                    else
                      assign out_of_stock_values = status_value
                    endif
                  endif
                endif
              endfor
              
              if updated_out_of_stock_by_option != ''
                assign updated_out_of_stock_by_option = updated_out_of_stock_by_option | append: '|' | append: entry_key | append: ':' | append: out_of_stock_values
              else
                assign updated_out_of_stock_by_option = entry_key | append: ':' | append: out_of_stock_values
              endif
            endif
          endfor
          
          assign out_of_stock_by_option = updated_out_of_stock_by_option
        -%}

        {%- if out_of_stock_by_option != '' -%}
          <div class="out-of-stock-display">
            {%- assign out_of_stock_by_option_array = out_of_stock_by_option | split: '|' -%}
            {%- for option_entry in out_of_stock_by_option_array -%}
              {%- if option_entry != '' -%}
                {%- assign entry_parts = option_entry | split: ':' -%}
                {%- assign option_key = entry_parts[0] -%}
                {%- assign out_of_stock_values = entry_parts[1] -%}
                
                {%- if out_of_stock_values != '' -%}
                  {%- assign option_name = '' -%}
                  {%- for name in option_names_array -%}
                    {%- assign name_key = name | downcase | replace: ' ', '_' -%}
                    {%- if name_key == option_key -%}
                      {%- assign option_name = name -%}
                      {%- break -%}
                    {%- endif -%}
                  {%- endfor -%}
                  
                  <div class="out-of-stock-section">
                    <h4>Out of stock {{ option_name }}:</h4>
                    <ul>
                      {%- assign values_array = out_of_stock_values | split: ',' -%}
                      {%- for value in values_array -%}
                        <li>{{ value }}</li>
                      {%- endfor -%}
                    </ul>
                  </div>
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          </div>
        {%- endif -%}
      {%- endif -%}
    {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="product-form__submit button button--full-width button--primary"
          disabled
        >
          {{ 'products.product.sold_out' | t }}
        </button>
      </div>
    </div>
  {%- endif -%}

  {%- if show_pickup_availability -%}
    {{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}

    {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
      | where: 'pick_up_enabled', true
    -%}

    <pickup-availability
      class="product__pickup-availabilities quick-add-hidden"
      {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
        available
      {% endif %}
      data-root-url="{{ routes.root_url }}"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-has-only-default-variant="{{ product.has_only_default_variant }}"
      data-product-page-color-scheme="gradient color-{{ section.settings.color_scheme }}"
    >
      <template>
        <pickup-availability-preview class="pickup-availability-preview">
          <span class="svg-wrapper">
            {{- 'icon-unavailable.svg' | inline_asset_content -}}
          </span>
          <div class="pickup-availability-info">
            <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
            <button class="pickup-availability-button link link--text underlined-link">
              {{ 'products.product.pickup_availability.refresh' | t }}
            </button>
          </div>
        </pickup-availability-preview>
      </template>
    </pickup-availability>

    <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}
</div>
